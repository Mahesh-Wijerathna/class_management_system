version: '3.8'

services:
  # =====================================================
  # DATABASE SERVICES
  # =====================================================
  
  # Main Database (MySQL 8.0)
  mysql:
    image: mysql:8.0
    container_name: tcms_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: tcms_db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "3306:3306"
    networks:
      - tcms_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: tcms_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tcms_network
    command: redis-server --appendonly yes

  # =====================================================
  # BACKEND SERVICES
  # =====================================================

  # Auth Service
  auth_service:
    build:
      context: ./backend/auth
      dockerfile: Dockerfile.prod
    container_name: tcms_auth_service
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=tcms_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_WHATSAPP_FROM=${TWILIO_WHATSAPP_FROM}
    ports:
      - "8081:80"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tcms_network
    volumes:
      - ./backend/auth/src:/var/www/html
      - ./logs/auth:/var/log/apache2

  # Class Service
  class_service:
    build:
      context: ./backend/class
      dockerfile: Dockerfile.prod
    container_name: tcms_class_service
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=tcms_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8087:80"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tcms_network
    volumes:
      - ./backend/class/src:/var/www/html
      - ./logs/class:/var/log/apache2

  # Teacher Service
  teacher_service:
    build:
      context: ./backend/teacher
      dockerfile: Dockerfile.prod
    container_name: tcms_teacher_service
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=tcms_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8088:80"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tcms_network
    volumes:
      - ./backend/teacher/src:/var/www/html
      - ./logs/teacher:/var/log/apache2

  # Student Service
  student_service:
    build:
      context: ./backend/student
      dockerfile: Dockerfile.prod
    container_name: tcms_student_service
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=tcms_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8089:80"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tcms_network
    volumes:
      - ./backend/student/src:/var/www/html
      - ./logs/student:/var/log/apache2

  # =====================================================
  # FRONTEND SERVICE
  # =====================================================

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: tcms_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8081
      - REACT_APP_CLASS_API_BASE_URL=http://localhost:8087
      - REACT_APP_TEACHER_API_BASE_URL=http://localhost:8088
      - REACT_APP_STUDENT_API_BASE_URL=http://localhost:8089
      - REACT_APP_APP_ENV=production
    ports:
      - "3000:80"
    depends_on:
      - auth_service
      - class_service
      - teacher_service
      - student_service
    networks:
      - tcms_network

  # =====================================================
  # REVERSE PROXY (NGINX)
  # =====================================================

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tcms_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - auth_service
      - class_service
      - teacher_service
      - student_service
    networks:
      - tcms_network

  # =====================================================
  # MONITORING & LOGGING
  # =====================================================

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: tcms_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tcms_network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: tcms_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - tcms_network

  # =====================================================
  # BACKUP SERVICE
  # =====================================================

  # Database backup service
  backup:
    image: mysql:8.0
    container_name: tcms_backup
    restart: "no"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      - mysql
    networks:
      - tcms_network
    command: ["/bin/bash", "/backup.sh"]

# =====================================================
# VOLUMES
# =====================================================

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =====================================================
# NETWORKS
# =====================================================

networks:
  tcms_network:
    driver: bridge 